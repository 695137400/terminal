import { Observable, Subscription } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { NgZone } from '@angular/core';
import { AppService, ConfigService, BaseTabComponent, BaseTabProcess, ElectronService, HostAppService, HotkeysService } from 'terminus-core';
import { IShell } from '../api';
import { Session, SessionsService } from '../services/sessions.service';
import { TerminalService } from '../services/terminal.service';
import { TerminalFrontendService } from '../services/terminalFrontend.service';
import { TerminalDecorator, ResizeEvent, SessionOptions } from '../api';
import { Frontend } from '../frontends/frontend';
export declare class TerminalTabComponent extends BaseTabComponent {
    private zone;
    private app;
    private hostApp;
    private hotkeys;
    private sessions;
    private electron;
    private terminalService;
    private terminalContainersService;
    config: ConfigService;
    private toastr;
    private decorators;
    session: Session;
    sessionOptions: SessionOptions;
    zoom: number;
    content: any;
    backgroundColor: string;
    frontend: Frontend;
    sessionCloseSubscription: Subscription;
    hotkeysSubscription: Subscription;
    htermVisible: boolean;
    shell: IShell;
    private output;
    private bellPlayer;
    private contextMenu;
    private termContainerSubscriptions;
    readonly input$: Observable<string>;
    readonly output$: Observable<string>;
    readonly resize$: Observable<ResizeEvent>;
    readonly alternateScreenActive$: Observable<boolean>;
    constructor(zone: NgZone, app: AppService, hostApp: HostAppService, hotkeys: HotkeysService, sessions: SessionsService, electron: ElectronService, terminalService: TerminalService, terminalContainersService: TerminalFrontendService, config: ConfigService, toastr: ToastrService, decorators: TerminalDecorator[]);
    initializeSession(columns: number, rows: number): void;
    getRecoveryToken(): any;
    ngOnInit(): void;
    detachTermContainerHandlers(): void;
    attachTermContainerHandlers(): void;
    sendInput(data: string): void;
    write(data: string): void;
    paste(): void;
    configure(): void;
    zoomIn(): void;
    zoomOut(): void;
    resetZoom(): void;
    getCurrentProcess(): Promise<BaseTabProcess>;
    ngOnDestroy(): void;
    destroy(): Promise<void>;
    canClose(): Promise<boolean>;
}
