import { Observable } from 'rxjs';
import { ComponentFactoryResolver, Injector } from '@angular/core';
import { BaseTabComponent } from '../components/baseTab.component';
import { Logger, LogService } from './log.service';
import { ConfigService } from './config.service';
import { HostAppService } from './hostApp.service';
export declare type TabComponentType = new (...args: any[]) => BaseTabComponent;
export declare class AppService {
    private componentFactoryResolver;
    private config;
    private hostApp;
    private injector;
    tabs: BaseTabComponent[];
    activeTab: BaseTabComponent;
    lastTabIndex: number;
    logger: Logger;
    private activeTabChange;
    private tabsChanged;
    private tabOpened;
    private tabClosed;
    private ready;
    private completionObservers;
    readonly activeTabChange$: Observable<BaseTabComponent>;
    readonly tabOpened$: Observable<BaseTabComponent>;
    readonly tabsChanged$: Observable<void>;
    readonly tabClosed$: Observable<BaseTabComponent>;
    readonly ready$: Observable<void>;
    constructor(componentFactoryResolver: ComponentFactoryResolver, config: ConfigService, hostApp: HostAppService, injector: Injector, log: LogService);
    openNewTab(type: TabComponentType, inputs?: any): BaseTabComponent;
    selectTab(tab: BaseTabComponent): void;
    toggleLastTab(): void;
    nextTab(): void;
    previousTab(): void;
    emitTabsChanged(): void;
    closeTab(tab: BaseTabComponent, checkCanClose?: boolean): Promise<void>;
    emitReady(): void;
    observeTabCompletion(tab: BaseTabComponent): Observable<void>;
    stopObservingTabCompletion(tab: BaseTabComponent): void;
}
